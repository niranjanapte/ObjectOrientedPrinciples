Dependency Inversion Principle or DIP states that:

High-level modules should not depend on low-level modules. Both should depend on abstractions. 
Abstractions should not depend on details. Details should depend on abstractions.
In other words

High-level modules/classes implement business rules or logic in a system (application). 
Low-level modules/classes deal with more detailed operations, in other words 
they may deal with writing information to databases or passing messages to the operating system or services.

A high-level module/class that has dependency on low-level modules/classes or some other class and knows a lot about the other classes it interacts with
 is said to be tightly coupled. When a class knows explicitly about the design and implementation of another class, 
 it raises the risk that changes to one class will break the other class. So we must keep these high-level and low-level modules/class loosely coupled as much as we can. 
 To do that, we need to make both of them dependent on abstractions instead of knowing each other